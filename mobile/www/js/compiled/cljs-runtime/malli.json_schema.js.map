{"version":3,"sources":["malli/json_schema.cljc"],"mappings":"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","names":["malli$json-schema$JsonSchema$_accept$dyn","x__4521__auto__","m__4522__auto__","malli.json-schema/-accept","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","malli.json-schema/JsonSchema","this","children","options","malli.json-schema/-ref","x","p__42036","map__42037","cljs.core/--destructure-map","cljs.core.get","malli.json-schema/-schema","schema","transform","definitions","result","G__42038","G__42039","malli.core.deref","temp__5751__auto__","ref","malli.core/-ref","cljs.core.swap_BANG_","cljs.core/assoc","malli.json-schema/unlift-keys","m","prefix","p1__42041#","p2__42040#","p3__42042#","cljs.core/reduce-kv","cljs.core._EQ_","cljs.core/name","cljs.core/namespace","cljs.core.assoc","cljs.core.keyword","malli.json-schema/unlift","malli.json-schema/select","cljs.core/select-keys","js/malli","js/malli.json-schema","js/malli.json-schema.accept","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","fexpr__42045","cljs.core/MultiFn","cljs.core.symbol","malli.json-schema/accept","name","_schema","_children","_options","_","p__42135","vec__42136","cljs.core.nth","value","p__42139","vec__42140","p__42144","vec__42145","p__42148","vec__42150","cljs.core/first","required","cljs.core.filter","malli.core._comp","cljs.core/not","cljs.core/second","cljs.core.mapv","cljs.core.apply","cljs.core/array-map","cljs.core.mapcat","p__42159","vec__42160","k","s","cljs.core/last","cljs.core.conj","malli.core.children","cljs.core.merge","malli.core.properties","clojure.set/rename-keys","p__42181","map__42182","G__42184","G__42185","p__42194","map__42195","G__42197","G__42198","p__42201","map__42202","G__42206","G__42207","malli.json-schema/-json-schema-walker","p","malli.core.type_properties","or__4223__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","malli.core.type","malli.json-schema/-transform","?schema","malli.core.walk","var_args","G__42239","malli.json-schema/transform","js/Error","malli.json_schema.transform","G__42244","cljs.core/deref","cljs.core/seq"],"sourcesContent":["(ns malli.json-schema\n  (:require [malli.core :as m]\n            [clojure.set :as set]))\n\n(defprotocol JsonSchema\n  (-accept [this children options] \"transforms schema to JSON Schema\"))\n\n(defn -ref [x] {:$ref (str \"#/definitions/\" x)})\n\n(defn -schema [schema {::keys [transform definitions] :as options}]\n  (let [result (transform (m/deref schema) options)]\n    (if-let [ref (m/-ref schema)]\n      (do (swap! definitions assoc ref result) (-ref ref))\n      result)))\n\n(defn unlift-keys [m prefix]\n  (reduce-kv #(if (= (name prefix) (namespace %2)) (assoc %1 (keyword (name %2)) %3) %1) {} m))\n\n(defn unlift [m prefix] (get m prefix))\n\n(defn select [m] (select-keys m [:title :description :default]))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [_ _ _ _] {})\n(defmethod accept 'any? [_ _ _ _] {})\n(defmethod accept 'some? [_ _ _ _] {})\n(defmethod accept 'number? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'integer? [_ _ _ _] {:type \"integer\"})\n(defmethod accept 'int? [_ _ _ _] {:type \"integer\" :format \"int64\"})\n(defmethod accept 'pos-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :minimum 1})\n(defmethod accept 'neg-int? [_ _ _ _] {:type \"integer\", :format \"int64\", :maximum -1})\n(defmethod accept 'nat-int? [_ _ _ _] {:type \"integer\", :format \"int64\" :minimum 0})\n(defmethod accept 'float? [_ _ _ _] {:type \"number\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\"})\n(defmethod accept 'pos? [_ _ _ _] {:type \"number\" :exclusiveMininum 0})\n(defmethod accept 'neg? [_ _ _ _] {:type \"number\" :exclusiveMaximum 0})\n(defmethod accept 'boolean? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'string? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-ident? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-keyword? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'simple-symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'qualified-symbol? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'uuid? [_ _ _ _] {:type \"string\" :format \"uuid\"})\n(defmethod accept 'uri? [_ _ _ _] {:type \"string\" :format \"uri\"})\n(defmethod accept 'decimal? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'inst? [_ _ _ _] {:type \"string\" :format \"date-time\"})\n(defmethod accept 'seqable? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'indexed? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'map? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'vector? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'list? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'seq? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'char? [_ _ _ _] {:type \"string\"})\n(defmethod accept 'set? [_ _ _ _] {:type \"array\" :uniqueItems true})\n(defmethod accept 'nil? [_ _ _ _] {:type \"null\"})\n(defmethod accept 'false? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'true? [_ _ _ _] {:type \"boolean\"})\n(defmethod accept 'zero? [_ _ _ _] {:type \"integer\"})\n#?(:clj (defmethod accept 'rational? [_ _ _ _] {:type \"double\"}))\n(defmethod accept 'coll? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'empty? [_ _ _ _] {:type \"array\" :maxItems 0 :minItems 0})\n(defmethod accept 'associative? [_ _ _ _] {:type \"object\"})\n(defmethod accept 'sequential? [_ _ _ _] {:type \"array\"})\n(defmethod accept 'ratio? [_ _ _ _] {:type \"integer\"})\n(defmethod accept 'bytes? [_ _ _ _] {:type \"string\" :format \"byte\"})\n\n(defmethod accept :> [_ _ [value] _] {:type \"number\" :format \"double\" :exclusiveMinimum value})\n(defmethod accept :>= [_ _ [value] _] {:type \"number\" :format \"double\" :minimum value})\n(defmethod accept :< [_ _ [value] _] {:type \"number\" :format \"double\" :exclusiveMaximum value})\n(defmethod accept :<= [_ _ [value] _] {:type \"number\" :format \"double\" :maximum value})\n(defmethod accept := [_ _ _ _] {})\n(defmethod accept :not= [_ _ _ _] {})\n\n(defmethod accept :and [_ _ children _] {:allOf children})\n(defmethod accept :or [_ _ children _] {:anyOf children})\n\n(defmethod accept ::m/val [_ _ children _] (first children))\n(defmethod accept :map [_ _ children _]\n  (let [required (->> children (filter (m/-comp not :optional second)) (mapv first))]\n    {:type \"object\"\n     :properties (apply array-map (mapcat (fn [[k _ s]] [k s]) children))\n     :required required}))\n\n(defmethod accept :multi [_ _ children _] {:oneOf (mapv last children)})\n(defmethod accept :map-of [_ _ children _] {:type \"object\", :additionalProperties (second children)})\n(defmethod accept :vector [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :sequential [_ _ children _] {:type \"array\", :items (first children)})\n(defmethod accept :set [_ _ children _] {:type \"array\", :items (first children), :uniqueItems true})\n(defmethod accept :enum [_ _ children _] {:enum children})\n(defmethod accept :maybe [_ _ children _] {:oneOf (conj children {:type \"null\"})})\n(defmethod accept :tuple [_ _ children _] {:type \"array\", :items children, :additionalItems false})\n(defmethod accept :re [_ schema _ options] {:type \"string\", :pattern (first (m/children schema options))})\n(defmethod accept :fn [_ _ _ _] {})\n\n(defmethod accept :string [_ schema _ _]\n  (merge {:type \"string\"} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minLength, :max :maxLength}))))\n\n(defmethod accept :int [_ schema _ _]\n  (merge {:type \"integer\"} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))\n\n(defmethod accept :double [_ schema _ _]\n  (merge {:type \"number\"} (-> schema m/properties (select-keys [:min :max]) (set/rename-keys {:min :minimum, :max :maximum}))))\n\n(defmethod accept :boolean [_ _ _ _] {:type \"boolean\"})\n(defmethod accept :keyword [_ _ _ _] {:type \"string\"})\n(defmethod accept :qualified-keyword [_ _ _ _] {:type \"string\"})\n(defmethod accept :symbol [_ _ _ _] {:type \"string\"})\n(defmethod accept :qualified-symbol [_ _ _ _] {:type \"string\"})\n(defmethod accept :uuid [_ _ _ _] {:type \"string\" :format \"uuid\"})\n\n(defmethod accept :ref [_ schema _ _] (-ref (m/-ref schema)))\n(defmethod accept :schema [_ schema _ options] (-schema schema options))\n(defmethod accept ::m/schema [_ schema _ options] (-schema schema options))\n\n(defmethod accept :merge [_ schema _ {::keys [transform] :as options}] (transform (m/deref schema) options))\n(defmethod accept :union [_ schema _ {::keys [transform] :as options}] (transform (m/deref schema) options))\n(defmethod accept :select-keys [_ schema _ {::keys [transform] :as options}] (transform (m/deref schema) options))\n\n(defn- -json-schema-walker [schema _ children options]\n  (let [p (merge (m/type-properties schema) (m/properties schema))]\n    (or (unlift p :json-schema)\n        (merge (select p)\n               (if (satisfies? JsonSchema schema)\n                 (-accept schema children options)\n                 (accept (m/type schema) schema children options))\n               (unlift-keys p :json-schema)))))\n\n(defn -transform [?schema options] (m/walk ?schema -json-schema-walker options))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (let [definitions (atom {})\n         options (merge options {::m/walk-entry-vals true, ::definitions definitions, ::transform -transform})]\n     (cond-> (-transform ?schema options) (seq @definitions) (assoc :definitions @definitions)))))\n"]}