{"version":3,"sources":["malli/swagger.cljc"],"mappings":"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","names":["malli$swagger$SwaggerSchema$_accept$dyn","x__4521__auto__","m__4522__auto__","malli.swagger/-accept","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","malli.swagger/SwaggerSchema","this","children","options","js/malli","js/malli.swagger","js/malli.swagger.accept","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","cljs.core.get","fexpr__42269","cljs.core/MultiFn","cljs.core.symbol","malli.swagger/accept","name","_schema","_children","_options","schema","malli.json-schema/accept","_","cljs.core.assoc","cljs.core/first","cs","cljs.core.mapv","cljs.core/last","p__42274","map__42275","cljs.core/--destructure-map","type","in","k","cljs.core._EQ_","cljs.core.not_EQ_","malli.swagger/-swagger-walker","p","cljs.core.merge","malli.core.type_properties","malli.core.properties","or__4223__auto__","malli.json-schema/unlift","malli.json-schema/select","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","malli.core.type","malli.json-schema/unlift-keys","malli.swagger/-transform","?schema","malli.core.walk","var_args","G__42281","malli.swagger/transform","js/Error","malli.swagger.transform","definitions","G__42286","cljs.core/deref","cljs.core/seq"],"sourcesContent":["(ns malli.swagger\n  (:require [malli.json-schema :as json-schema]\n            [malli.core :as m]))\n\n(defprotocol SwaggerSchema\n  (-accept [this children options] \"transforms schema to Swagger Schema\"))\n\n(defmulti accept (fn [name _schema _children _options] name) :default ::default)\n\n(defmethod accept ::default [name schema children options] (json-schema/accept name schema children options))\n(defmethod accept 'float? [_ _ _ _] {:type \"number\" :format \"float\"})\n(defmethod accept 'double? [_ _ _ _] {:type \"number\" :format \"double\"})\n(defmethod accept 'nil? [_ _ _ _] {})\n\n(defmethod accept :and [_ _ children _] (assoc (first children) :x-allOf children))\n(defmethod accept :or [_ _ children _] (assoc (first children) :x-anyOf children))\n(defmethod accept :multi [_ _ children _] (let [cs (mapv last children)] (assoc (first cs) :x-anyOf cs)))\n\n(defmethod accept :maybe [_ _ children {:keys [type in]}]\n  (let [k (if (and (= type :parameter) (not= in :body)) :allowEmptyValue :x-nullable)]\n    (assoc (first children) k true)))\n\n(defmethod accept :tuple [_ _ children _] {:type \"array\" :items {} :x-items children})\n\n(defn- -swagger-walker [schema _ children options]\n  (let [p (merge (m/type-properties schema) (m/properties schema))]\n    (or (json-schema/unlift p :swagger)\n        (json-schema/unlift p :json-schema)\n        (merge (json-schema/select p)\n               (if (satisfies? SwaggerSchema schema)\n                 (-accept schema children options)\n                 (accept (m/type schema) schema children options))\n               (json-schema/unlift-keys p :json-schema)\n               (json-schema/unlift-keys p :swagger)))))\n\n(defn -transform [?schema options] (m/walk ?schema -swagger-walker options))\n\n;;\n;; public api\n;;\n\n(defn transform\n  ([?schema]\n   (transform ?schema nil))\n  ([?schema options]\n   (let [definitions (atom {})\n         options (merge options {::m/walk-entry-vals true\n                                 ::json-schema/definitions definitions\n                                 ::json-schema/transform -transform})]\n     (cond-> (-transform ?schema options) (seq @definitions) (assoc :definitions @definitions)))))\n"]}